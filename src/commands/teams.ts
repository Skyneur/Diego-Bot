import { Command } from "@src/handlers/commands";
import { Client, ChatInputCommandInteraction, EmbedBuilder, ColorResolvable, MessageFlags } from "discord.js";
import config from "@src/config";

const command = new Command<[Client, ChatInputCommandInteraction]>(
  "slash",
  "teams",
  "Cr√©er des √©quipes al√©atoires √† partir d'une liste de membres",
  null,
  [
    {
      type: "Number",
      name: "nombre",
      description: "Nombre d'√©quipes √† cr√©er",
      required: true,
      choices: []
    },
    {
      type: "String",
      name: "membres",
      description: "Liste des membres s√©par√©s par des espaces, virgules ou retours √† la ligne",
      required: true,
      choices: []
    }
  ],
  async (client, interaction) => {
    // R√©cup√©rer les options
    const nombreOption = interaction.options.get("nombre");
    const teamCount = Math.max(2, Math.min(25, nombreOption ? Number(nombreOption.value) : 2));
    const membersInput = interaction.options.getString("membres") || "";
    
    // Traiter la liste des membres
    const membersList = membersInput
      .split(/[\n,\s]+/) // S√©parer par retour √† la ligne, virgule ou espace
      .map(member => member.trim())
      .filter(member => member.length > 0);
    
    // V√©rifier qu'il y a suffisamment de membres
    if (membersList.length < 2) {
      const errorEmbed = new EmbedBuilder()
        .setTitle("`‚ùå` **Erreur**")
        .setDescription("Vous devez sp√©cifier au moins 2 membres pour former des √©quipes.")
        .setColor("Red")
        .setTimestamp();
        
      await interaction.reply({
        embeds: [errorEmbed],
        flags: MessageFlags.Ephemeral
      });
      return;
    }
    
    // V√©rifier que le nombre d'√©quipes est valide
    if (teamCount < 2 || teamCount > membersList.length) {
      const errorEmbed = new EmbedBuilder()
        .setTitle("`‚ùå` **Erreur**")
        .setDescription(`Le nombre d'√©quipes doit √™tre compris entre 2 et ${membersList.length}.`)
        .setColor("Red")
        .setTimestamp();
        
      await interaction.reply({
        embeds: [errorEmbed],
        flags: MessageFlags.Ephemeral
      });
      return;
    }
    
    // M√©langer la liste des membres
    const shuffledMembers = [...membersList];
    for (let i = shuffledMembers.length - 1; i > 0; i--) {
      const j = Math.floor(Math.random() * (i + 1));
      [shuffledMembers[i], shuffledMembers[j]] = [shuffledMembers[j], shuffledMembers[i]];
    }
    
    // Cr√©er les √©quipes
    const teams: string[][] = Array(teamCount).fill(0).map(() => []);
    
    // R√©partition √©quilibr√©e des membres
    const membersPerTeam = Math.floor(shuffledMembers.length / teamCount);
    const extraMembers = shuffledMembers.length % teamCount;
    
    let memberIndex = 0;
    
    // Distribuer les membres de mani√®re √©quilibr√©e
    for (let i = 0; i < teamCount; i++) {
      const teamSize = i < extraMembers ? membersPerTeam + 1 : membersPerTeam;
      
      for (let j = 0; j < teamSize; j++) {
        if (memberIndex < shuffledMembers.length) {
          teams[i].push(shuffledMembers[memberIndex]);
          memberIndex++;
        }
      }
    }
    
    // Cr√©er l'embed pour afficher les √©quipes
    const teamsEmbed = new EmbedBuilder()
      .setTitle("`üèÜ` **√âquipes form√©es**")
      .setDescription(`*${shuffledMembers.length} membres r√©partis en ${teamCount} √©quipes*`)
      .setColor(config.color as ColorResolvable)
      .setTimestamp();
    
    // Ajouter chaque √©quipe √† l'embed
    teams.forEach((team, index) => {
      teamsEmbed.addFields({
        name: `\`üë•\` **√âquipe ${index + 1}** (${team.length} membres)`,
        value: team.length > 0 ? team.map(member => `‚Ä¢ ${member}`).join('\n') : "√âquipe vide",
        inline: false
      });
    });
    
    // R√©pondre avec l'embed des √©quipes
    await interaction.reply({
      embeds: [teamsEmbed]
    });
  }
);

export default command;